#!/bin/bash

# Script de configuration compl√®te du d√©veloppement pour Winchester Ascendancy
# Installe toutes les d√©pendances et configure l'environnement

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${PURPLE}[SUCCESS]${NC} $1"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "docker-compose.yml" ]; then
    error "Ce script doit √™tre ex√©cut√© depuis la racine du projet Winchester Ascendancy"
    exit 1
fi

log "üöÄ Configuration compl√®te du d√©veloppement - Winchester Ascendancy"
echo ""

# √âtape 1: V√©rifier les pr√©requis
log "üîç V√©rification des pr√©requis syst√®me..."

# V√©rifier Docker
if command -v docker &> /dev/null; then
    log "‚úÖ Docker est install√©"
else
    error "‚ùå Docker n'est pas install√©"
    error "   Veuillez installer Docker : https://docs.docker.com/get-docker/"
    exit 1
fi

# V√©rifier Docker Compose
if command -v docker-compose &> /dev/null; then
    log "‚úÖ Docker Compose est install√©"
else
    error "‚ùå Docker Compose n'est pas install√©"
    error "   Veuillez installer Docker Compose : https://docs.docker.com/compose/install/"
    exit 1
fi

# V√©rifier Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version | cut -d'.' -f1 | cut -d'v' -f2)
    if [ "$NODE_VERSION" -ge 18 ]; then
        log "‚úÖ Node.js $(node --version) est install√©"
    else
        warn "‚ö†Ô∏è  Node.js $(node --version) d√©tect√©, mais la version 18+ est recommand√©e"
    fi
else
    warn "‚ö†Ô∏è  Node.js n'est pas install√©"
    warn "   Certaines fonctionnalit√©s de d√©veloppement local ne seront pas disponibles"
fi

# V√©rifier Git
if command -v git &> /dev/null; then
    log "‚úÖ Git est install√©"
else
    error "‚ùå Git n'est pas install√©"
    error "   Veuillez installer Git : https://git-scm.com/downloads"
    exit 1
fi

echo ""

# √âtape 2: Initialiser les sous-modules
log "üîß Initialisation des sous-modules Git..."
if [ ! -d "frontend" ] || [ ! -f "frontend/package.json" ]; then
    warn "‚ö†Ô∏è  Sous-module frontend non trouv√©"
    ./scripts/submodule-init.sh
else
    log "‚úÖ Sous-modules d√©j√† initialis√©s"
fi

echo ""

# √âtape 3: Configuration des variables d'environnement
log "‚öôÔ∏è  Configuration des variables d'environnement..."

if [ ! -f ".env" ]; then
    if [ -f "env.example" ]; then
        cp env.example .env
        warn "‚ö†Ô∏è  Fichier .env cr√©√© √† partir de env.example"
        warn "   Pensez √† configurer vos variables d'environnement dans .env"
    else
        warn "‚ö†Ô∏è  Fichier env.example non trouv√©"
        warn "   Cr√©ez un fichier .env manuellement avec vos configurations"
    fi
else
    log "‚úÖ Fichier .env d√©j√† pr√©sent"
fi

echo ""

# √âtape 4: Installation des d√©pendances
log "üì¶ Installation des d√©pendances..."

# Frontend
if [ -f "frontend/package.json" ]; then
    log "üîß Installation des d√©pendances frontend..."
    cd frontend
    if [ -f "package-lock.json" ]; then
        npm ci
    else
        npm install
    fi
    cd ..
    success "‚úÖ D√©pendances frontend install√©es"
else
    warn "‚ö†Ô∏è  Sous-module frontend non disponible"
fi

# Backend
if [ -f "backend/package.json" ]; then
    log "üîß Installation des d√©pendances backend..."
    cd backend
    if [ -f "package-lock.json" ]; then
        npm ci
    else
        npm install
    fi
    cd ..
    success "‚úÖ D√©pendances backend install√©es"
else
    warn "‚ö†Ô∏è  Sous-module backend non disponible"
fi

# Bot
if [ -f "bot/package.json" ]; then
    log "üîß Installation des d√©pendances bot..."
    cd bot
    if [ -f "package-lock.json" ]; then
        npm ci
    else
        npm install
    fi
    cd ..
    success "‚úÖ D√©pendances bot install√©es"
else
    warn "‚ö†Ô∏è  Sous-module bot non disponible"
fi

echo ""

# √âtape 5: Configuration Docker
log "üê≥ Configuration Docker..."

# Cr√©er les volumes Docker s'ils n'existent pas
docker volume create winchester_mongo_data 2>/dev/null || true

# Pr√©parer les images Docker
log "üèóÔ∏è  Construction des images Docker..."
docker-compose build --parallel

success "‚úÖ Images Docker construites"

echo ""

# √âtape 6: D√©marrage des services de base
log "üöÄ D√©marrage des services de base..."

# D√©marrer seulement MongoDB pour les tests
docker-compose up -d mongodb

# Attendre que MongoDB soit pr√™t
log "‚è≥ Attente du d√©marrage de MongoDB..."
sleep 10

# Tester la connexion MongoDB
if docker-compose exec -T mongodb mongo --eval "db.adminCommand('ismaster')" &>/dev/null; then
    success "‚úÖ MongoDB est op√©rationnel"
else
    warn "‚ö†Ô∏è  MongoDB semble ne pas r√©pondre correctement"
    warn "   V√©rifiez les logs : docker-compose logs mongodb"
fi

echo ""

# √âtape 7: R√©sum√© et instructions finales
success "üéâ Configuration du d√©veloppement termin√©e !"
echo ""
echo "=================================================="
echo "üìã R√âSUM√â DE LA CONFIGURATION"
echo "=================================================="
echo ""
echo "‚úÖ Pr√©requis v√©rifi√©s"
echo "‚úÖ Sous-modules initialis√©s"
echo "‚úÖ Variables d'environnement configur√©es"
echo "‚úÖ D√©pendances install√©es"
echo "‚úÖ Images Docker construites"
echo "‚úÖ Services de base d√©marr√©s"
echo ""
echo "=================================================="
echo "üöÄ COMMANDES DISPONIBLES"
echo "=================================================="
echo ""
echo "D√©marrer l'application compl√®te :"
echo "  docker-compose up -d"
echo ""
echo "D√©marrer en mode d√©veloppement :"
echo "  ./scripts/docker-dev.sh"
echo ""
echo "Arr√™ter tous les services :"
echo "  docker-compose down"
echo ""
echo "Voir les logs :"
echo "  docker-compose logs -f [service-name]"
echo ""
echo "=================================================="
echo "üåê ACC√àS AUX SERVICES"
echo "=================================================="
echo ""
echo "Frontend : http://localhost:3000"
echo "Backend  : http://localhost:4000"
echo "API Docs : http://localhost:4000/api/docs"
echo "MongoDB  : localhost:27017"
echo ""
echo "=================================================="
echo "üìö PROCHAINES √âTAPES"
echo "=================================================="
echo ""
echo "1. Configurez vos applications Discord :"
echo "   https://discord.com/developers/applications"
echo ""
echo "2. √âditez le fichier .env avec vos tokens"
echo ""
echo "3. D√©marrez l'application : docker-compose up -d"
echo ""
echo "4. Acc√©dez √† http://localhost:3000"
echo ""
echo "Pour plus d'informations, consultez docs/INSTALL.md"
